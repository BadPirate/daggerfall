/* ************************************************************************
*   File: spec_procs.c                                  Part of CircleMUD *
*  Usage: implementation of special procedures for mobiles/objects/rooms  *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

#include "conf.h"
#include "sysdep.h"


#include "structs.h"
#include "utils.h"
#include "comm.h"
#include "interpreter.h"
#include "handler.h"
#include "db.h"
#include "spells.h"


/*   external vars  */
extern struct room_data *world;
extern struct char_data *character_list;
extern struct descriptor_data *descriptor_list;
extern struct index_data *mob_index;
extern struct index_data *obj_index;
extern struct time_info_data time_info;
extern struct command_info cmd_info[];
extern int top_of_world;

/* extern functions */
void add_follower(struct char_data * ch, struct char_data * leader);

#define BTV_NORTH  (1 << 0)
#define BTV_EAST   (1 << 1)
#define BTV_SOUTH  (1 << 2)
#define BTV_WEST   (1 << 3)
#define BTV_UP     (1 << 4)
#define BTV_DOWN   (1 << 5)

#define NUM_OBJ_SENTINELS 	2

struct obj_given_data {
  long whom;
  int where;     /* what room the obj was given in */
  int vnum;      /* vnum of the obj. Do NOT try and use rnums */
  int self_vnum; /* so you can assign this to several mobs,
                    without having attach this to every char  */
  int timer;     /* so players can't tie up memory by giving the mob
                    a zillion items and never walking thru an exit,
                    the timer will keep ticking and eventually forget
                    that a player ever gave the mob anything in the
                    first place */
  struct obj_given_data *next;
};

struct obj_sentinel_recog {
  int vnum;
  int self_vnum;
  int direction;
  char *can_pass; /* What is said if the char can go */
  char *cannot_pass; /* what is said if the char cannot go */
};

struct obj_sentinel_recog osn_list[NUM_OBJ_SENTINELS] = {

  /* Do yourself a favor and don't leave this entry of info in. I used
     the stock receptionist to test this proc */

  { 104, 102,
   BTV_SOUTH,
   "You may pass sir.",
   "You haven't given me an &rArena Club&w entry pass, go away."
   },
  { 118, 118,
   (BTV_SOUTH | BTV_NORTH),
   "&nB&rr&ge&ba&mk on through to the other side.",
   "You have to buy a pass, then give it to me to go thru."
  }
};

struct social_type {
  char *cmd;
  int next_line;
};


/* ********************************************************************
*  Special procedures for mobiles                                     *
******************************************************************** */

int spell_sort_info[MAX_SKILLS+1];

extern char *spells[];

void sort_spells(void)
{
  int a, b, tmp;

  /* initialize array */
  for (a = 1; a < MAX_SKILLS; a++)
    spell_sort_info[a] = a;

  /* Sort.  'a' starts at 1, not 0, to remove 'RESERVED' */
  for (a = 1; a < MAX_SKILLS - 1; a++)
    for (b = a + 1; b < MAX_SKILLS; b++)
      if (strcmp(spells[spell_sort_info[a]], spells[spell_sort_info[b]]) > 0) {
	tmp = spell_sort_info[a];
	spell_sort_info[a] = spell_sort_info[b];
	spell_sort_info[b] = tmp;
      }
}


char *how_good(int percent)
{
  static char buf[256];

  if (percent == 0)
    strcpy(buf, " (not learned)");
  else if (percent <= 10)
    strcpy(buf, " (awful)");
  else if (percent <= 20)
    strcpy(buf, " (bad)");
  else if (percent <= 40)
    strcpy(buf, " (poor)");
  else if (percent <= 55)
    strcpy(buf, " (average)");
  else if (percent <= 70)
    strcpy(buf, " (fair)");
  else if (percent <= 80)
    strcpy(buf, " (good)");
  else if (percent <= 85)
    strcpy(buf, " (very good)");
  else
    strcpy(buf, " (superb)");

  return (buf);
}

char *prac_types[] = {
  "spell",
  "skill"
};

#define LEARNED_LEVEL	0	/* % known which is considered "learned" */
#define MAX_PER_PRAC	1	/* max percent gain in skill per practice */
#define MIN_PER_PRAC	2	/* min percent gain in skill per practice */
#define PRAC_TYPE	3	/* should it say 'spell' or 'skill'?	 */

/* actual prac_params are in class.c */
extern int prac_params[4][NUM_CLASSES];

#define LEARNED(ch) (prac_params[LEARNED_LEVEL][(int)GET_CLASS(ch)])
#define MINGAIN(ch) (prac_params[MIN_PER_PRAC][(int)GET_CLASS(ch)])
#define MAXGAIN(ch) (prac_params[MAX_PER_PRAC][(int)GET_CLASS(ch)])
#define SPLSKL(ch) (prac_types[prac_params[PRAC_TYPE][(int)GET_CLASS(ch)]])

void list_skills(struct char_data * ch)
{
  extern char *spells[];
  extern struct spell_info_type spell_info[];
  int i, sortpos;

  if (!GET_PRACTICES(ch))
    strcpy(buf, "You have no practice sessions remaining.\r\n");
  else
    sprintf(buf, "You have %d practice session%s remaining.\r\n",
	    GET_PRACTICES(ch), (GET_PRACTICES(ch) == 1 ? "" : "s"));

  sprintf(buf, "%sYou know of the following %ss:\r\n", buf, SPLSKL(ch));

  strcpy(buf2, buf);

  for (sortpos = 1; sortpos < MAX_SKILLS; sortpos++) {
    i = spell_sort_info[sortpos];
    if (strlen(buf2) >= MAX_STRING_LENGTH - 32) {
      strcat(buf2, "**OVERFLOW**\r\n");
      break;
    }
    if (GET_LEVEL(ch) >= spell_info[i].min_level[(int) GET_CLASS(ch)]) {
      sprintf(buf, "%-20s %s\r\n", spells[i], how_good(GET_SKILL(ch, i)));
      strcat(buf2, buf);
    }
  }

  page_string(ch->desc, buf2, 1);
}

SPECIAL(newbie_guide_d)
{
  static char tour_path[] =
  "BAAAU1DE2Ws3nn4UEw5eWDse6wSSWN7SEN8NNN9NNE0WSSSSZ";

  static char *path;
  static int index;
  static bool move = FALSE;

  if (!move) {
       if (time_info.hours == 1) { /* Tour starts at 1 am*/
       move = TRUE;
       path = tour_path;
       index = 0;
     } else if (time_info.hours == 12) { /* And at 12 pm */
       move = TRUE;
       path = tour_path;
       index = 0;
     }
  }
  if (cmd || !move || (GET_POS(ch) < POS_RESTING) ||
      (GET_POS(ch) == POS_FIGHTING))
    return FALSE;

  switch (path[index]) {
  case 'N':
    perform_move(ch, SCMD_NORTH - 1, 0);
    break;
  case 'S':
    perform_move(ch, SCMD_SOUTH - 1, 0);
    break;
  case 'E':
    perform_move(ch, SCMD_EAST - 1, 0);
    break;
  case 'W':
    perform_move(ch, SCMD_WEST - 1, 0);
    break;
  case 'U':
    perform_move(ch, SCMD_UP - 1, 0);
    break;
  case 'D':
    perform_move(ch, SCMD_DOWN - 1, 0);
    break;
  case 'n':
    perform_move(ch, SCMD_NORTHWEST - 1, 0);
    break;
  case 'e':
    perform_move(ch, SCMD_NORTHEAST - 1, 0);
    break;
  case 's':
    perform_move(ch, SCMD_SOUTHEAST - 1, 0);
    break;
  case 'w':
    perform_move(ch, SCMD_SOUTHWEST - 1, 0);
    break;
  case 'B':
    GET_POS(ch)=POS_STANDING;
    act("$n stands up and announces 'The tour is going to start soon!'", FALSE,ch, 0, 0, TO_ROOM);
    break;
  case 'Z':
    char_from_room(ch);
    char_to_room(ch, real_room(3001));
    act("$n sits and rests for his next journey.", FALSE, ch, 0, 0, TO_ROOM);
    GET_POS(ch)=POS_RESTING;
    move = FALSE;
    break; 
  case 'A':
    act("$n says, 'Newbie tour is starting soon, type FOLLOW $n to join!'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;
  case '1':
    act("$n says, 'This is Sheila, she will heal you if your injured and here.'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '2':
    act("$n says, 'You can find items that people DONATE here.'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '3':
    act("$n says, 'You can SELL almost anything here!'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '4':
    act("$n says, 'This is the ARENA dying doesn't suck here.'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '5':
    act("$n says, 'This is the Arena Club, you must find a pass to enter.'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '6':
    act("$n says, 'This is the banker, you can DEPOSIT money here'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '7':
    act("$n says, 'This is the baker, you can BUY BREAD here.'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;
  case '8':
    act("$n says, 'This is the fountain you can FILL your canteens here'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;  
  case '9':
    act("$n says, 'To the east is where you could live if you found a waiver'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;
  case '0':
    act("$n says, 'Here is where I leave you, make sure you WEAR ALL and '", 
      FALSE, ch, 0, 0, TO_ROOM);
    act("$n says, 'you WIELD your sword, have fun, stop following me,'", 
      FALSE, ch, 0, 0, TO_ROOM);
    act("$n says, 'FOLLOW SELF, now go out there and kill some newbie monsters!!!'", 
      FALSE, ch, 0, 0, TO_ROOM);
    break;
  };
  index++;
  return FALSE;
}

SPECIAL(obj_sentinel) {
  ACMD(do_give);
  ACMD(do_say);
  int can_go=FALSE, i, which_sent=0, freed=FALSE;
  struct char_data *self;
  struct obj_data *tmp1,*tmp2;
  struct obj_given_data *new_info, *tmp3, *tmp4, *temp;

  static struct obj_given_data *obj_give_master;

  self=(struct char_data *) me;

  if(CMD_IS("give"))
    {
      /* first clean out my inv. so the objs given to me are all from
         the same char */
      if(self->carrying)
        {
          for(tmp1=self->carrying; tmp1; tmp1=tmp2)
            {
              tmp2=tmp1->next_content;
              extract_obj(tmp1); /* Obj_from_char is called from within it */
            }
        }
      do_give(ch,argument,cmd,0);

      if(GET_IDNUM(ch)==-1) /* Ignore if mobs give items.. too hard :P */
        return (1);

      if(self->carrying)
        {
          for(tmp1=self->carrying; tmp1; tmp1=tmp1->next_content)
            {
              CREATE(new_info, struct obj_given_data, 1);
              new_info->whom=GET_IDNUM(ch);
              new_info->where=self->in_room;
              new_info->vnum=GET_OBJ_VNUM(tmp1);
              new_info->self_vnum=GET_MOB_VNUM(self);
              new_info->timer=20;
              /*
                My PULSE_MOBILE is 8 sec, yours may be different. To
                figure out how much time this is in RL, multiply the value
                here times PULSE_MOBILE. For me, this would be 160 secs.
                You can also create some nifty effects with this. But that
                is for you to add to this.
                  - mendar
              */
              new_info->next=obj_give_master;
              obj_give_master=new_info;
            }
        }
      return (1);
    }

  if(IS_MOVE(cmd))
    {
      if(IS_NPC(ch))
        {
          return (1); /* let the other mobs go */
        }

      for(tmp3=obj_give_master; tmp3 && (!can_go) ; tmp3=tmp3->next)
        {
          if(((tmp3->whom)==GET_IDNUM(ch))&&
             ((tmp3->self_vnum)==GET_MOB_VNUM(self)))
            {
              for(i=0; (i<NUM_OBJ_SENTINELS) && (!can_go) ; i++)
                {
                  if(osn_list[i].self_vnum==tmp3->self_vnum)
                    {
                      if((tmp3->vnum)==(osn_list[i].vnum))
                        {
                          if(((osn_list[i].direction)&(1 << (cmd-1)) ) > 0 )
                            {
                              can_go=TRUE;
                              which_sent=i;
                            }
                        }
                    }
                }
            }
        }

      if(can_go)
        {
          /* first, we remove one obj from the 'memory' of objs given */
          for(tmp3=obj_give_master; tmp3 && (!freed) ; tmp3=tmp4)
            {
              tmp4=tmp3->next;

              if((tmp3->vnum)==(osn_list[which_sent].vnum))
                {
                  REMOVE_FROM_LIST(tmp3,obj_give_master,next);
                  free(tmp3);
                  freed=TRUE;
                }
            }
          /* now we tell the player they may pass and let them go */
          do_say(self, osn_list[which_sent].can_pass, 0, 0);
          return (0);
        }
      else
        {
          /* now we tell the player they can't go :P */
          do_say(self, osn_list[which_sent].cannot_pass, 0, 0);
          act("$n blocks your way!", FALSE, self, 0, ch, TO_VICT);
          act("$n blocks $N's way!", FALSE, self, 0, ch, TO_NOTVICT);
          return (1);
        }
    }

    if(!FIGHTING(self))
      {
        for(tmp3=obj_give_master; tmp3 ; tmp3=tmp4)
          {
            tmp4=tmp3->next;

            if((tmp3->where)==(self->in_room))
              {
                tmp3->timer--;
                if(tmp3->timer<=0)
                  {
                    REMOVE_FROM_LIST(tmp3,obj_give_master,next);
                    free(tmp3);
                    freed=TRUE;
                  }
              }
          }
      }
  return FALSE;
}

SPECIAL(monkey) {
  struct char_data *vict;
  struct obj_data *obj, *list;
  int to_take, obj_count = 0, found = 0;

  if ((cmd) || (GET_POS(ch) != POS_STANDING))
    return FALSE;

  /* Pick a victim */
  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
    if (!IS_NPC(vict) && (GET_LEVEL(vict) < LVL_IMMORT) && (!number(0,4)))
    {
      if (AWAKE(vict) && (number(0, GET_LEVEL(ch)) == 0))
      {
        act("You gasp as you realize $n is attempting to take something from you!", FALSE, ch, 0, vict, TO_VICT);
        act("$n just tried to take something from $N!", TRUE, ch, 0, vict, TO_NOTVICT);
        return TRUE;
      } else
      {
        /* Decide whether to take armor or object */
        switch(number(0,3)) {
        case 0:
        case 2:
          break;
        case 1:
          log ("in monkey - case 1");
          to_take = number(0, 25);
          if (GET_EQ(vict, to_take) && CAN_SEE_OBJ(ch, GET_EQ(vict,to_take)))
          {
            obj = GET_EQ(vict, to_take);
            act("$n has just stolen $p from $N!!",
                FALSE, ch, obj, vict, TO_NOTVICT);
            act("$n has just stolen $p from you!!",
                FALSE, ch, obj, vict, TO_VICT);

            obj_to_char(unequip_char(vict, to_take), vict);
            obj_from_char(obj);
            obj_to_room(obj, ch->in_room);
            act("$n has just exploded into little bitty bits!",
                FALSE, ch, 0, 0, TO_ROOM);
            extract_char(ch);
            return TRUE;
          }
          break;
        case 3: /* object */
          list = vict->carrying;
          for (obj = list; obj; obj = obj->next_content) {
            if (CAN_SEE_OBJ(vict, obj)) {
              obj_count += 1;
              found = 1;
            }
          }
          if (found == 1) /* Ok, they're carrying something, so pick one*/
          {
            to_take = number(0, obj_count);
            obj_count = 0;
            for (obj = list; obj; obj = obj->next_content)
            {
              obj_count += 1;
              if (obj_count == to_take)
              {
                act("$n has just stolen $p from $N!!",
                    FALSE, ch, obj, vict, TO_NOTVICT);
                act("$n has just stolen $p from you!!",
                    FALSE, ch, obj, vict, TO_VICT);
                obj_from_char(obj);
                obj_to_room(obj, ch->in_room);
                act("$n has just exploded into little bitty bits!",
                    FALSE, ch, 0, 0, TO_ROOM);
                extract_char(ch);
                return TRUE;
              }
            }
            break;
          }
        } /* end case 2 */
      }
    }
  return FALSE;
}

SPECIAL(guild)
{
  int skill_num, percent;

  extern struct spell_info_type spell_info[];
  extern struct int_app_type int_app[];

  if (IS_NPC(ch) || !CMD_IS("practice"))
    return 0;

  skip_spaces(&argument);

  if (!*argument) {
    list_skills(ch);
    return 1;
  }
  if (GET_PRACTICES(ch) <= 0) {
    send_to_char("You do not seem to be able to practice now.\r\n", ch);
    return 1;
  }

  skill_num = find_skill_num(argument);

  if (skill_num < 1 ||
      GET_LEVEL(ch) < spell_info[skill_num].min_level[(int) GET_CLASS(ch)]) {
    sprintf(buf, "You do not know of that %s.\r\n", SPLSKL(ch));
    send_to_char(buf, ch);
    return 1;
  }
  if (GET_SKILL(ch, skill_num) >= LEARNED(ch)) {
    send_to_char("You are already learned in that area.\r\n", ch);
    return 1;
  }
  send_to_char("You practice for a while...\r\n", ch);
  GET_PRACTICES(ch)--;

  percent = GET_SKILL(ch, skill_num);
  percent += MIN(MAXGAIN(ch), MAX(MINGAIN(ch), int_app[GET_INT(ch)].learn));

  SET_SKILL(ch, skill_num, MIN(LEARNED(ch), percent));

  if (GET_SKILL(ch, skill_num) >= LEARNED(ch))
    send_to_char("You are now learned in that area.\r\n", ch);

  return 1;
}

SPECIAL(temple_cleric)
{
  struct char_data *vict;
  struct char_data *hitme = NULL;
  static int this_hour;
  float temp1 = 1;
  float temp2 = 1;

  if (cmd) return FALSE;

  if (time_info.hours != 0) {

  this_hour = time_info.hours;

  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
    {
        if (IS_AFFECTED(vict,AFF_POISON)) hitme = vict;
    }
    if (hitme != NULL) {
          cast_spell(ch, hitme, NULL, SPELL_REMOVE_POISON);
          return TRUE;
         }

  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
    {
        if (IS_AFFECTED(vict,AFF_BLIND)) hitme = vict;
    }
    if (hitme != NULL) {
          cast_spell(ch, hitme, NULL, SPELL_CURE_BLIND);
          return TRUE;
         }

  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
    {
       temp1 = GET_HIT(vict) / GET_MAX_HIT(vict);
       if (temp1 < temp2) {
             temp2 = temp1;
             hitme = vict;
            }
    }
    if (hitme != NULL) {
          cast_spell(ch, hitme, NULL, SPELL_CURE_LIGHT);
          return TRUE;
         }
  }
  return 0;
}

SPECIAL(dump)
{
  struct obj_data *k;
  int value = 0;

  ACMD(do_drop);
  char *fname(char *namelist);

  for (k = world[ch->in_room].contents; k; k = world[ch->in_room].contents) {
    act("$p vanishes in a puff of smoke!", FALSE, 0, k, 0, TO_ROOM);
    extract_obj(k);
  }

  if (!CMD_IS("drop"))
    return 0;

  do_drop(ch, argument, cmd, 0);

  for (k = world[ch->in_room].contents; k; k = world[ch->in_room].contents) {
    act("$p vanishes in a puff of smoke!", FALSE, 0, k, 0, TO_ROOM);
    value += MAX(1, MIN(50, GET_OBJ_COST(k) / 10));
    extract_obj(k);
  }

  if (value) {
    act("You are awarded for outstanding performance.", FALSE, ch, 0, 0, TO_CHAR);
    act("$n has been awarded for being a good citizen.", TRUE, ch, 0, 0, TO_ROOM);

    if (GET_LEVEL(ch) < 3)
      gain_exp(ch, value);
    else
      GET_GOLD(ch) += value;
  }
  return 1;
}


SPECIAL(mayor)
{
  ACMD(do_gen_door);

  static char open_path[] =
  "W3a3003b33000c111d0d111Oe333333Oe22c222112212111a1S.";

  static char close_path[] =
  "W3a3003b33000c111d0d111CE333333CE22c222112212111a1S.";

  static char *path;
  static int index;
  static bool move = FALSE;

  if (!move) {
    if (time_info.hours == 6) {
      move = TRUE;
      path = open_path;
      index = 0;
    } else if (time_info.hours == 20) {
      move = TRUE;
      path = close_path;
      index = 0;
    }
  }
  if (cmd || !move || (GET_POS(ch) < POS_SLEEPING) ||
      (GET_POS(ch) == POS_FIGHTING))
    return FALSE;

  switch (path[index]) {
  case '0':
  case '1':
  case '2':
  case '3':
    perform_move(ch, path[index] - '0', 1);
    break;

  case 'W':
    GET_POS(ch) = POS_STANDING;
    act("$n awakens and groans loudly.", FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'S':
    GET_POS(ch) = POS_SLEEPING;
    act("$n lies down and instantly falls asleep.", FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'a':
    act("$n says 'Hello Honey!'", FALSE, ch, 0, 0, TO_ROOM);
    act("$n smirks.", FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'b':
    act("$n says 'What a view!  I must get something done about that dump!'",
	FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'c':
    act("$n says 'Vandals!  Youngsters nowadays have no respect for anything!'",
	FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'd':
    act("$n says 'Good day, citizens!'", FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'e':
    act("$n says 'I hereby declare the bazaar open!'", FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'E':
    act("$n says 'I hereby declare Midgaard closed!'", FALSE, ch, 0, 0, TO_ROOM);
    break;

  case 'O':
    do_gen_door(ch, "gate", 0, SCMD_UNLOCK);
    do_gen_door(ch, "gate", 0, SCMD_OPEN);
    break;

  case 'C':
    do_gen_door(ch, "gate", 0, SCMD_CLOSE);
    do_gen_door(ch, "gate", 0, SCMD_LOCK);
    break;

  case '.':
    move = FALSE;
    break;

  }

  index++;
  return FALSE;
}


/* ********************************************************************
*  General special procedures for mobiles                             *
******************************************************************** */


void npc_steal(struct char_data * ch, struct char_data * victim)
{
  int gold;

  if (IS_NPC(victim))
    return;
  if (GET_LEVEL(victim) >= LVL_IMMORT)
    return;

  if (AWAKE(victim) && (number(0, GET_LEVEL(ch)) == 0)) {
    act("You discover that $n has $s hands in your wallet.", FALSE, ch, 0, victim, TO_VICT);
    act("$n tries to steal gold from $N.", TRUE, ch, 0, victim, TO_NOTVICT);
  } else {
    /* Steal some gold coins */
    gold = (int) ((GET_GOLD(victim) * number(1, 10)) / 100);
    if (gold > 0) {
      GET_GOLD(ch) += gold;
      GET_GOLD(victim) -= gold;
    }
  }
}


SPECIAL(snake)
{
  if (cmd)
    return FALSE;

  if (GET_POS(ch) != POS_FIGHTING)
    return FALSE;

  if (FIGHTING(ch) && (FIGHTING(ch)->in_room == ch->in_room) &&
      (number(0, 42 - GET_LEVEL(ch)) == 0)) {
    act("$n bites $N!", 1, ch, 0, FIGHTING(ch), TO_NOTVICT);
    act("$n bites you!", 1, ch, 0, FIGHTING(ch), TO_VICT);
    call_magic(ch, FIGHTING(ch), 0, SPELL_POISON, GET_LEVEL(ch), CAST_SPELL);
    return TRUE;
  }
  return FALSE;
}


SPECIAL(thief)
{
  struct char_data *cons;

  if (cmd)
    return FALSE;

  if (GET_POS(ch) != POS_STANDING)
    return FALSE;

  for (cons = world[ch->in_room].people; cons; cons = cons->next_in_room)
    if (!IS_NPC(cons) && (GET_LEVEL(cons) < LVL_IMMORT) && (!number(0, 4))) {
      npc_steal(ch, cons);
      return TRUE;
    }
  return FALSE;
}


SPECIAL(magic_user)
{
  struct char_data *vict;

  if (cmd || GET_POS(ch) != POS_FIGHTING)
    return FALSE;

  /* pseudo-randomly choose someone in the room who is fighting me */
  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
    if (FIGHTING(vict) == ch && !number(0, 4))
      break;

  /* if I didn't pick any of those, then just slam the guy I'm fighting */
  if (vict == NULL)
    vict = FIGHTING(ch);

  if ((GET_LEVEL(ch) > 13) && (number(0, 10) == 0))
    cast_spell(ch, vict, NULL, SPELL_SLEEP);

  if ((GET_LEVEL(ch) > 7) && (number(0, 8) == 0))
    cast_spell(ch, vict, NULL, SPELL_BLINDNESS);

  if ((GET_LEVEL(ch) > 12) && (number(0, 12) == 0)) {
    if (IS_EVIL(ch))
      cast_spell(ch, vict, NULL, SPELL_ENERGY_DRAIN);
    else if (IS_GOOD(ch))
      cast_spell(ch, vict, NULL, SPELL_DISPEL_EVIL);
  }
  if (number(0, 4))
    return TRUE;

  switch (GET_LEVEL(ch)) {
  case 4:
  case 5:
    cast_spell(ch, vict, NULL, SPELL_MAGIC_MISSILE);
    break;
  case 6:
  case 7:
    cast_spell(ch, vict, NULL, SPELL_CHILL_TOUCH);
    break;
  case 8:
  case 9:
    cast_spell(ch, vict, NULL, SPELL_BURNING_HANDS);
    break;
  case 10:
  case 11:
    cast_spell(ch, vict, NULL, SPELL_SHOCKING_GRASP);
    break;
  case 12:
  case 13:
    cast_spell(ch, vict, NULL, SPELL_LIGHTNING_BOLT);
    break;
  case 14:
  case 15:
  case 16:
  case 17:
    cast_spell(ch, vict, NULL, SPELL_COLOR_SPRAY);
    break;
  default:
    cast_spell(ch, vict, NULL, SPELL_FIREBALL);
    break;
  }
  return TRUE;

}


/* ********************************************************************
*  Special procedures for mobiles                                      *
******************************************************************** */

SPECIAL(guild_guard)
{
  int i;
  extern int guild_info[][3];
  struct char_data *guard = (struct char_data *) me;
  char *buf = "The guard humiliates you, and blocks your way.\r\n";
  char *buf2 = "The guard humiliates $n, and blocks $s way.";

  if (!IS_MOVE(cmd) || IS_AFFECTED(guard, AFF_BLIND))
    return FALSE;

  if (GET_LEVEL(ch) >= LVL_IMMORT)
    return FALSE;

  for (i = 0; guild_info[i][0] != -1; i++) {
    if ((IS_NPC(ch) || GET_CLASS(ch) != guild_info[i][0]) &&
	world[ch->in_room].number == guild_info[i][1] &&
	cmd == guild_info[i][2]) {
      send_to_char(buf, ch);
      act(buf2, FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
    }
  }

  return FALSE;
}



SPECIAL(puff)
{
  ACMD(do_say);

  if (cmd)
    return (0);

  switch (number(0, 60)) {
  case 0:
    do_say(ch, "My god!  It's full of stars!", 0, 0);
    return (1);
  case 1:
    do_say(ch, "How'd all those fish get up here?", 0, 0);
    return (1);
  case 2:
    do_say(ch, "I'm a very hermaphadite dragon.", 0, 0);
    return (1);
  case 3:
    do_say(ch, "I've got a peaceful, easy feeling.", 0, 0);
    return (1);
  case 4:
    do_say(ch, "I love Lord Jaxom, He's real cute.",0,0);
  default:
    return (0);
  }
}



SPECIAL(fido)
{

  struct obj_data *i, *temp, *next_obj;

  if (cmd || !AWAKE(ch))
    return (FALSE);

  for (i = world[ch->in_room].contents; i; i = i->next_content) {
    if (GET_OBJ_TYPE(i) == ITEM_CONTAINER && GET_OBJ_VAL(i, 3)) {
      act("$n savagely devours a corpse.", FALSE, ch, 0, 0, TO_ROOM);
      for (temp = i->contains; temp; temp = next_obj) {
	next_obj = temp->next_content;
	obj_from_obj(temp);
	obj_to_room(temp, ch->in_room);
      }
      extract_obj(i);
      return (TRUE);
    }
  }
  return (FALSE);
}



SPECIAL(janitor)
{
  struct obj_data *i;

  if (cmd || !AWAKE(ch))
    return (FALSE);

  for (i = world[ch->in_room].contents; i; i = i->next_content) {
    if (!CAN_WEAR(i, ITEM_WEAR_TAKE))
      continue;
    if (GET_OBJ_TYPE(i) != ITEM_DRINKCON && GET_OBJ_COST(i) >= 15)
      continue;
    act("$n picks up some trash.", FALSE, ch, 0, 0, TO_ROOM);
    obj_from_room(i);
    obj_to_char(i, ch);
    return TRUE;
  }

  return FALSE;
}


SPECIAL(cityguard)
{
  struct char_data *tch, *evil;
  int max_evil;

  if (cmd || !AWAKE(ch) || FIGHTING(ch))
    return FALSE;

  max_evil = 1000;
  evil = 0;

  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
    if (!IS_NPC(tch) && CAN_SEE(ch, tch) && IS_SET(PLR_FLAGS(tch), PLR_KILLER)) {
      act("$n screams 'HEY!!!  You're one of those PLAYER KILLERS!!!!!!'", FALSE, ch, 0, 0, TO_ROOM);
      hit(ch, tch, TYPE_UNDEFINED);
      return (TRUE);
    }
  }

  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
    if (!IS_NPC(tch) && CAN_SEE(ch, tch) && IS_SET(PLR_FLAGS(tch), PLR_THIEF)){
      act("$n screams 'HEY!!!  You're one of those PLAYER THIEVES!!!!!!'", FALSE, ch, 0, 0, TO_ROOM);
      hit(ch, tch, TYPE_UNDEFINED);
      return (TRUE);
    }
  }

  for (tch = world[ch->in_room].people; tch; tch = tch->next_in_room) {
    if (CAN_SEE(ch, tch) && FIGHTING(tch)) {
      if ((GET_ALIGNMENT(tch) < max_evil) &&
	  (IS_NPC(tch) || IS_NPC(FIGHTING(tch)))) {
	max_evil = GET_ALIGNMENT(tch);
	evil = tch;
      }
    }
  }

  if (evil && (GET_ALIGNMENT(FIGHTING(evil)) >= 0)) {
    act("$n screams 'PROTECT THE INNOCENT!  BANZAI!  CHARGE!  ARARARAGGGHH!'", FALSE, ch, 0, 0, TO_ROOM);
    hit(ch, evil, TYPE_UNDEFINED);
    return (TRUE);
  }
  return (FALSE);
}


#define PET_PRICE(pet) (GET_LEVEL(pet) * 300)

SPECIAL(pet_shops)
{
  char buf[MAX_STRING_LENGTH], pet_name[256];
  int pet_room;
  struct char_data *pet;

  pet_room = ch->in_room + 1;

  if (CMD_IS("list")) {
    send_to_char("Available pets are:\r\n", ch);
    for (pet = world[pet_room].people; pet; pet = pet->next_in_room) {
      sprintf(buf, "%8d - %s\r\n", PET_PRICE(pet), GET_NAME(pet));
      send_to_char(buf, ch);
    }
    return (TRUE);
  } else if (CMD_IS("buy")) {

    argument = one_argument(argument, buf);
    argument = one_argument(argument, pet_name);

    if (!(pet = get_char_room(buf, pet_room))) {
      send_to_char("There is no such pet!\r\n", ch);
      return (TRUE);
    }
    if (GET_GOLD(ch) < PET_PRICE(pet)) {
      send_to_char("You don't have enough gold!\r\n", ch);
      return (TRUE);
    }
    GET_GOLD(ch) -= PET_PRICE(pet);

    pet = read_mobile(GET_MOB_RNUM(pet), REAL);
    GET_EXP(pet) = 0;
    SET_BIT(AFF_FLAGS(pet), AFF_CHARM);

    if (*pet_name) {
      sprintf(buf, "%s %s", pet->player.name, pet_name);
      /* free(pet->player.name); don't free the prototype! */
      pet->player.name = str_dup(buf);

      sprintf(buf, "%sA small sign on a chain around the neck says 'My name is %s'\r\n",
	      pet->player.description, pet_name);
      /* free(pet->player.description); don't free the prototype! */
      pet->player.description = str_dup(buf);
    }
    char_to_room(pet, ch->in_room);
    add_follower(pet, ch);

    /* Be certain that pets can't get/carry/use/wield/wear items */
    IS_CARRYING_W(pet) = 1000;
    IS_CARRYING_N(pet) = 100;

    send_to_char("May you enjoy your pet.\r\n", ch);
    act("$n buys $N as a pet.", FALSE, ch, 0, pet, TO_ROOM);

    return 1;
  }
  /* All commands except list and buy */
  return 0;
}



/* ********************************************************************
*  Special procedures for objects                                     *
******************************************************************** */


SPECIAL(spread)
{
  if (obj->in_room == real_room(106))
    obj->in_room = number(1, top_of_zone);
}

SPECIAL(bank)
{
  int amount;

  if (CMD_IS("balance")) {
    if (GET_BANK_GOLD(ch) > 0)
      sprintf(buf, "Your current balance is %d coins.\r\n",
	      GET_BANK_GOLD(ch));
    else
      sprintf(buf, "You currently have no money deposited.\r\n");
    send_to_char(buf, ch);
    return 1;
  } else if (CMD_IS("deposit")) {
    if ((amount = atoi(argument)) <= 0) {
      send_to_char("How much do you want to deposit?\r\n", ch);
      return 1;
    }
    if (GET_GOLD(ch) < amount) {
      send_to_char("You don't have that many coins!\r\n", ch);
      return 1;
    }
    GET_GOLD(ch) -= amount;
    GET_BANK_GOLD(ch) += amount;
    sprintf(buf, "You deposit %d coins.\r\n", amount);
    send_to_char(buf, ch);
    act("$n makes a bank transaction.", TRUE, ch, 0, FALSE, TO_ROOM);
    return 1;
  } else if (CMD_IS("withdraw")) {
    if ((amount = atoi(argument)) <= 0) {
      send_to_char("How much do you want to withdraw?\r\n", ch);
      return 1;
    }
    if (GET_BANK_GOLD(ch) < amount) {
      send_to_char("You don't have that many coins deposited!\r\n", ch);
      return 1;
    }
    GET_GOLD(ch) += amount;
    GET_BANK_GOLD(ch) -= amount;
    sprintf(buf, "You withdraw %d coins.\r\n", amount);
    send_to_char(buf, ch);
    act("$n makes a bank transaction.", TRUE, ch, 0, FALSE, TO_ROOM);
    return 1;
  } else
    return 0;
}

SPECIAL (redbutton)
{
  struct obj_data *obj = (struct obj_data *) me;
  struct obj_data *port;
  char obj_name[MAX_STRING_LENGTH];
  int roomto;

    if (!CMD_IS("push")) return FALSE;

    argument = one_argument(argument,obj_name);
    if (!(port = get_obj_in_list_vis(ch,obj_name,world[ch->in_room].contents))) 
    {
      return(FALSE);
    }

    if (port != obj)
      return(FALSE);
    if (ch->points.move <= 0)
    {
      send_to_char("Your too tired.\r\n", ch);
      return(TRUE);
    }
        roomto = number(0, top_of_world);
        if (ROOM_FLAGGED(roomto, ROOM_NOTELEPORT) || 
            ROOM_FLAGGED(roomto, ROOM_DEATH))
        {
          send_to_char("BOING!!  You didn't hit the button right I guess.\r\n",
                       ch);
          return(TRUE);
        }
        act("$n pushes $p and fades away.", FALSE, ch, port, 0, TO_ROOM);
        act("You push $p, and you are transported elsewhere", FALSE, ch, port, 0, TO_CHAR);
        char_from_room(ch);
        ch->points.move -= 20;
        char_to_room(ch, roomto);
        look_at_room(ch, 0);
        act("$n slowly materializes from nowhere...", FALSE, ch, 0, 0, TO_ROOM);
        return(TRUE);
}

